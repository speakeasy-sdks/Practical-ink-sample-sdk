// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"github.com/speakeasy-sdks/Practical-ink-sample-sdk/internal/utils"
	"github.com/speakeasy-sdks/Practical-ink-sample-sdk/types"
)

// Project - Top-level TechPort object representing a NASA technology project and its associated data.
type Project struct {
	// Abbreviated name of the project.
	Acronym *string `json:"acronym,omitempty"`
	// List of additional and cross-cutting technology areas associated with the project.
	AdditionalTas []TechnologyArea `json:"additionalTas,omitempty"`
	// Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.
	Benefits *string `json:"benefits,omitempty"`
	// List of document files or links to the project final report closeout documentation.
	CloseoutDocuments []string `json:"closeoutDocuments,omitempty"`
	// The project closeout summary excerpt.
	CloseoutSummary *string `json:"closeoutSummary,omitempty"`
	// Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.
	CoFundingPartners []Organization `json:"coFundingPartners,omitempty"`
	// Names of the additional investigators who are scientists or engineers for this project.
	CoInvestigators []string `json:"coInvestigators,omitempty"`
	// A detailed description of the project.
	Description *string `json:"description,omitempty"`
	// List of the NASA destinations the technology on this project helps achieve.
	Destinations []string `json:"destinations,omitempty"`
	// The month and year the project is expected to complete its work.
	EndDate *string `json:"endDate,omitempty"`
	// Unique identifier for the project.
	ID *int64 `json:"id,omitempty"`
	// ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.
	LastUpdated *types.Date `json:"lastUpdated,omitempty"`
	// A NASA center/facility associated with an project.
	LeadOrganization *Organization `json:"leadOrganization,omitempty"`
	// List of library items in the project library.
	LibraryItems []LibraryItem `json:"libraryItems,omitempty"`
	// List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.
	PrimaryTas []TechnologyArea `json:"primaryTas,omitempty"`
	// Names of the Principal Investigators who are the lead scientists or engineers for this project.
	PrincipalInvestigators []string `json:"principalInvestigators,omitempty"`
	// Names of the Program Directors responsible for the management of this project.
	ProgramDirectors []string `json:"programDirectors,omitempty"`
	// Names of the Program Managers responsible for the management of this project.
	ProgramManagers []string `json:"programManagers,omitempty"`
	// Names of the Project Managers responsible for the management of this project.
	ProjectManagers []string `json:"projectManagers,omitempty"`
	// The NASA Mission Directorate or Office that is the primary funding source for this project.
	ResponsibleMissionDirectorateOrOffice *string `json:"responsibleMissionDirectorateOrOffice,omitempty"`
	// The NASA program that is the primary funding source for this project.
	ResponsibleProgram *string `json:"responsibleProgram,omitempty"`
	// The month and year the project was authorized to proceed.
	StartDate *string `json:"startDate,omitempty"`
	// Indicates whether the project is currently active, completed, or canceled.
	Status *string `json:"status,omitempty"`
	// The supported mission type (Projected Mission, Planned Mission, or Pull).
	SupportedMissionType *string `json:"supportedMissionType,omitempty"`
	// The supporting organizations for this project that are conducting work on the project.
	SupportingOrganizations []Organization `json:"supportingOrganizations,omitempty"`
	// The current technology maturity (technology readiness level) of the project.
	TechnologyMaturityCurrent *string `json:"technologyMaturityCurrent,omitempty"`
	// The estimated technology maturity (technology readiness level) of the project at its end.
	TechnologyMaturityEnd *string `json:"technologyMaturityEnd,omitempty"`
	// The technology maturity (technology readiness level) of the project at its beginning.
	TechnologyMaturityStart *string `json:"technologyMaturityStart,omitempty"`
	// Title of the project.
	Title *string `json:"title,omitempty"`
	// The URL for the associated website.
	Website *string `json:"website,omitempty"`
	// States and territories with people performing work on this project.
	WorkLocations []string `json:"workLocations,omitempty"`
}

func (p Project) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Project) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Project) GetAcronym() *string {
	if o == nil {
		return nil
	}
	return o.Acronym
}

func (o *Project) GetAdditionalTas() []TechnologyArea {
	if o == nil {
		return nil
	}
	return o.AdditionalTas
}

func (o *Project) GetBenefits() *string {
	if o == nil {
		return nil
	}
	return o.Benefits
}

func (o *Project) GetCloseoutDocuments() []string {
	if o == nil {
		return nil
	}
	return o.CloseoutDocuments
}

func (o *Project) GetCloseoutSummary() *string {
	if o == nil {
		return nil
	}
	return o.CloseoutSummary
}

func (o *Project) GetCoFundingPartners() []Organization {
	if o == nil {
		return nil
	}
	return o.CoFundingPartners
}

func (o *Project) GetCoInvestigators() []string {
	if o == nil {
		return nil
	}
	return o.CoInvestigators
}

func (o *Project) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Project) GetDestinations() []string {
	if o == nil {
		return nil
	}
	return o.Destinations
}

func (o *Project) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *Project) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Project) GetLastUpdated() *types.Date {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

func (o *Project) GetLeadOrganization() *Organization {
	if o == nil {
		return nil
	}
	return o.LeadOrganization
}

func (o *Project) GetLibraryItems() []LibraryItem {
	if o == nil {
		return nil
	}
	return o.LibraryItems
}

func (o *Project) GetPrimaryTas() []TechnologyArea {
	if o == nil {
		return nil
	}
	return o.PrimaryTas
}

func (o *Project) GetPrincipalInvestigators() []string {
	if o == nil {
		return nil
	}
	return o.PrincipalInvestigators
}

func (o *Project) GetProgramDirectors() []string {
	if o == nil {
		return nil
	}
	return o.ProgramDirectors
}

func (o *Project) GetProgramManagers() []string {
	if o == nil {
		return nil
	}
	return o.ProgramManagers
}

func (o *Project) GetProjectManagers() []string {
	if o == nil {
		return nil
	}
	return o.ProjectManagers
}

func (o *Project) GetResponsibleMissionDirectorateOrOffice() *string {
	if o == nil {
		return nil
	}
	return o.ResponsibleMissionDirectorateOrOffice
}

func (o *Project) GetResponsibleProgram() *string {
	if o == nil {
		return nil
	}
	return o.ResponsibleProgram
}

func (o *Project) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *Project) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Project) GetSupportedMissionType() *string {
	if o == nil {
		return nil
	}
	return o.SupportedMissionType
}

func (o *Project) GetSupportingOrganizations() []Organization {
	if o == nil {
		return nil
	}
	return o.SupportingOrganizations
}

func (o *Project) GetTechnologyMaturityCurrent() *string {
	if o == nil {
		return nil
	}
	return o.TechnologyMaturityCurrent
}

func (o *Project) GetTechnologyMaturityEnd() *string {
	if o == nil {
		return nil
	}
	return o.TechnologyMaturityEnd
}

func (o *Project) GetTechnologyMaturityStart() *string {
	if o == nil {
		return nil
	}
	return o.TechnologyMaturityStart
}

func (o *Project) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Project) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *Project) GetWorkLocations() []string {
	if o == nil {
		return nil
	}
	return o.WorkLocations
}
