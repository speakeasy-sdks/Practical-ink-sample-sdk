// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/Practical-ink-sample-sdk/internal/utils"
	"github.com/speakeasy-sdks/Practical-ink-sample-sdk/types"
	"net/http"
)

// QueryParamFormat - The response type desired.
type QueryParamFormat string

const (
	QueryParamFormatJSON QueryParamFormat = "json"
	QueryParamFormatXML  QueryParamFormat = "xml"
)

func (e QueryParamFormat) ToPointer() *QueryParamFormat {
	return &e
}

func (e *QueryParamFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		*e = QueryParamFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamFormat: %v", v)
	}
}

type GetAPIProjectsFormatRequest struct {
	// Automatically added
	DotFormat string `pathParam:"style=simple,explode=false,name=.format"`
	// The response type desired.
	Format QueryParamFormat `default:"json" queryParam:"style=form,explode=true,name=format"`
	// ISO 8601 full-date in the format YYYY-MM-DD. Filters the list of available ID values by their lastUpdated parameter.
	UpdatedSince types.Date `queryParam:"style=form,explode=true,name=updatedSince"`
}

func (g GetAPIProjectsFormatRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAPIProjectsFormatRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAPIProjectsFormatRequest) GetDotFormat() string {
	if o == nil {
		return ""
	}
	return o.DotFormat
}

func (o *GetAPIProjectsFormatRequest) GetFormat() QueryParamFormat {
	if o == nil {
		return QueryParamFormat("")
	}
	return o.Format
}

func (o *GetAPIProjectsFormatRequest) GetUpdatedSince() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.UpdatedSince
}

// GetAPIProjectsFormatResponseResponseBody - Successful response
type GetAPIProjectsFormatResponseResponseBody struct {
	ID          *int64
	LastUpdated *string
}

func (o *GetAPIProjectsFormatResponseResponseBody) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetAPIProjectsFormatResponseResponseBody) GetLastUpdated() *string {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

// GetAPIProjectsFormatResponseBody - Successful response
type GetAPIProjectsFormatResponseBody struct {
	ID          *int64  `json:"id,omitempty"`
	LastUpdated *string `json:"lastUpdated,omitempty"`
}

func (o *GetAPIProjectsFormatResponseBody) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetAPIProjectsFormatResponseBody) GetLastUpdated() *string {
	if o == nil {
		return nil
	}
	return o.LastUpdated
}

type GetAPIProjectsFormatResponse struct {
	// Successful response
	TwoHundredApplicationJSONObject *GetAPIProjectsFormatResponseBody
	Body                            []byte
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAPIProjectsFormatResponse) GetTwoHundredApplicationJSONObject() *GetAPIProjectsFormatResponseBody {
	if o == nil {
		return nil
	}
	return o.TwoHundredApplicationJSONObject
}

func (o *GetAPIProjectsFormatResponse) GetBody() []byte {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *GetAPIProjectsFormatResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAPIProjectsFormatResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAPIProjectsFormatResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
